paramater  =  entity that stores a value ( can be a name (variable), number (postitional parameter), or s[ecial character( special parameter))
varaible is assigning name and sotring it( not a parameter but is a parameter denotted by name)


variable
identifier="hellowaorld"
no spaces next to equal sign
a="Hello WORLD"
echo $a when trying to reference a variable
"Hello World


special prameters
$I $0 $# $* $! $? $_ $$ $@ $- 

echo $# number of argument spasswed to a script
$0 name of a script 
$2 poiston2 
$* number of arguments passed
$? exit status of last command usaally 0 means worked can be edited
$_ last argument provided
$$ PID of current shell
 $- flags set
 
 
 
functions
break code into managable blocks
series of commands exeucuted in single command


must declare function adn call it 


myfunc() {
echo Hello I am a function
#THis is a commetn
}

myfunc
Hello I am a function


vim yourmom
#!/bin/bash

function getuser()
{
     echo "Make a choice [1,2,3]:"
     read userchoice 
     case $userchoice in
       (1) echo one ;;
       (2) echo two ''
       (3) echo three ;;
       (*) echo other ;;
     esac
 }
 getuser
 
 
 
 
 variable subsitution
 substituting variable with its value
 
 fun2() {
 #simple varaibele subsittution 
     name="John"
     echo $name
 }
 
 
 
 
 fun2() {
    #Var Sub within double quotes
    name="John"
    echo "My name is $name"
}

fun3()  {
#var sub within singele quotes
  name="John"
  echo 'My name is $name'     will print $name not John bc singlw quotes
  
  }
  
  
fun4() {
#curly braces tp se[erate varoan'es
 name="John"
 echo "My name is $nameny5"       prints nothing bc no variabel names nameny5
 echo "My name is ${name}ny5"     Johnny5
}

fun5() {
  #curly braces and values to sub
   name="John"
   echo "My name is $name:0:2}"     My name is Jo
}




    Using find, find all files under the $HOME directory with a .bin extension ONLY.
    Once the file(s) and their path(s) have been found, remove the file name from the absolute path output.
    Ensure there is no trailing / at the end of the directory path when outputting to standard output.
    You may need to sort the output depending on the command(s) you use.

find ~ -name "*.bin" | awk 'BEGIN{FS="/";OFS="/"}{NF=NF -1;{print $0}' | sort -u 




    Write a script which will copy the last entry/line in the passwd-like file specified by the $1 positional parameter
    Modify the copied line to change:
        User name to the value specified by $2 positional parameter
        Used id and group id to the value specified by $3 positional parameter
        Home directory to a directory matching the user name specified by $2 positional parameter under the /home directory
        The default shell to `/bin/bash'
    Append the modified line to the end of the file


Using any BASH command complete the following:

    Sort the /etc/passwd file numerically by the GID field.
    For the 10th entry in the sorted passwd file, get an md5 hash of that entryâ€™s home directory.
    Output ONLY the MD5 hash of the directory's name to standard output.
sort -t: -k4n /etc/[asswd | awk -F: 'NR==10{print $6}' md5sum | awk '{print $1}'






    Write a script which will find and hash the contents 3 levels deep from each of these directories: /bin /etc /var
    Your script should:
        Exclude named pipes. These can break your script.
        Redirect STDOUT and STDERR to separate files.
        Determine the count of files hashed in the file with hashes.
        Determine the count of unsuccessfully hashed directories.
        Have both counts output to the screen with an appropriate title for each count.

mkdir ~/HASHES
find /bin /etc /var -maxdepth 3 | -type p -exec md5sum {} >
~/HASHES/success 2>~/HASHES/faii; \;
A=$(wc -1 ~/HASHES/success | awk '{print $1}')
B=$(grep -c "Is a directory" ~/HASHES/fail)
if [[ "$A" ]];
    then
        echo "Succesfully Hashed Files: $A";
        echo "Unsuccessfully Hashed Directories: $B"
    else 
        echo "oops"; -maxdepth 3
fi
