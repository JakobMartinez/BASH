 coding bash

Create a script that will perform the following actions:

    Replace every instance of 'cat' in "infile" with 'dog'.
    Replace every instance of 'Navy' in "infile" with 'Army'.
    Replacements are case-sensitive.
    Write the output to the file specifed by the variable 'outfile'.
dmesg | egrep "BIOS|CPU" | egrep -vi "usable|reserved" | cut -d] -f2-
function q1()
{
  #Valid Variables are:
  infile=$1
  outfile=$2
  #Your code here
}
-----------------------------------------------------------------------------------------------------------------------------q1
function q1()
{
    infile=$1
    outfile=$2
    sed -e "s/cat/dog/g" -e "s/Navy/Army/g" $infile > $outfile
}
-----------------------------------------------------------------------------------------------------------q1a



Create a script that will print to standard output all user names from the /etc/passwd file.

function q1()
{
  #Valid Variables are:
  #nonedmesg | egrep "BIOS|CPU" | egrep -vi "usable|reserved" | cut -d] -f2-
  #You code here
}

------------------------------------------------------------------------------q2
function q1()
{
cut -d':' -f1 /etc/passwd
}
-----------------------------------------------------------------------------------q2a




Create a script that will perform the following actions:

    Print to standard output all usernames from the file path specified by the parameter filename sorted ascending numerically by user id.
    The file will be in the format of /etc/passwd

function q1()
{
  #Valid Variables are:
  filename=$1
  #Your code here
}

----------------------------------------------------------------------------------------q3


function q1()
{
filename=$1
sort -n -t: -k3 $filename | cut -d':' -f1
}
--------------------------------------------------------------------------------------q3a
 coding bash

Create a script that will perform the following actions:

    Print to standard output the total number of files in the directory specified by dirname.
    If the directory does not exist, print 'Invalid Directory'
    The count excludes the '.' and '..' pseudo-directories.

function q1()
{
  #Valid Variables are:
  dirname=$1
  #Your code here
}

----------------------------------------------------------------------------------------q4
function q1()
{
  dirname=$1
  ls -1 $dirname | wc -l
}
-----------------------------------------------------------------------------------------q4a


Create a script that will perform the following actions:

    Delete all files contained in the directory specified by dirdel
    Also delete the directory specified by dirdel

function q1()
{
  #Valid Variables are:
  dirdel=$1
  #Your code here
}

------------------------------------------------------------------------------------------------q5
function q1()
{
  dirdel=$1
  rm -r $dirdel


}
-------------------------------------------------------------------------------------------------q5a
 bash

Create a script that will perform the following actions:

    Create a file specified by the name newfile.
    Set the file modified date to the value specified in filedate and time to '1730'. NOTE: filedate contains only a valid date in YYYYMMDD format, not a time.

function q1()
{
  #Valid Variables are:
  newfile=$1
  filedate=$2
  #Your code here
}

------------------------------------------------------------------------------------------------------------------------q6
function q1()
{
 newfile=$1
 filedate=$2
 touch -t "$filedate"1730 $newfile
}
-----------------------------------------------------------------------------------------------------------q6a


Read the file specified by fname and perform an action based on the contents of the file:

    If contents are 0 to 9, print "single digit" to standard output.
    If contents are 10 to 99, print "double digit" to standard output.
    If contents are 100 to 999, print "triple digit" to standard output.
    Otherwise, print "Error" to standard output.

NOTE: There will only be one line of content in the file specified by fname.

function q1()
{
  #Valid Variables are:
  fname=$1
  #Your code here
}

-----------------------------------------------------------------------------------------------------------------q7
function q1()
{
fname=$1
cont=$(cat $fname)
if [[ $cont -lt 10 ]]; then
    echo "single digit"
elif [[ $cont -lt 100 ]]; then
    echo "double digit"
elif [[ $cont -lt 1000 ]]; then
    echo "triple digit"
else 
    echo "Error"
fi
}
-------------------------------------------------------------------------------------------------------------q7a
 coding bash

Copy all lines from the file specified by src variable to the file specified by dst variable which DO NOT contain the text specified by match variable.

function q1()
{
  #Valid Variables are:
  src=$1
  dst=$2
  match=$3
  #Your code here
}

--------------------------------------------------------------------------------------------------------------------q8
function q1()
{
src=$1
dst=$2
match=$3
grep -v $match $1 > $dst
}
-----------------------------------------------------------------------q8a

Terminate the process that has the randomly assigned name specified by procname variable. procname does not contain path information.

function q1()
{
  #Valid Variables are:
  procname=$1
  #Your code here
}

-------------------------q9

function q1()
{
  #Valid Variables are:
  procname=$1
  killall $procname
}
-----------------------------------------------------------q9a


Create a sorted full-path list of all files in the directory dirpath that were modified within the previous day. Directories should not be included in the output. Print the list to the screen, one item per line.

NOTE: The full paths to files should be in your output. (i.e. /etc/passwd would be included)

NOTE: Directory entries should not be included. (i.e. /etc would NOT be included)

function q1()
{
  #Valid Variables are:
  dirpath=$1
  #Your code here
}

-------------------------------------------------------------------------------------------------------q10
function q1()
{
  dirpath=$1
find $dirpath -type f -mtime -1 | sort 
}
---------------------------------------------------------------------------------------------q10a






















find /etc -type f -printf '%m\n' 2>/dev/null > initial.del
for octal in $(cat initial.del)
do
if [[ $octal -ge 642 ]]; then
    echo "$octal" >> high.del 
elif [[ $octal -le 640 ]]; then
    echo "$octal" >> low.del
fi
done
echo "File w/ OCTAL Perm Values 642+:"
cat high.del | sort | uniq -c | sort -nr
echo
echo "Files w/ OCTAL Perm Values 0-640:"
cat low.del | sort | uniq -c | sort -nr

rm *.del












 bash

Activity:

Using any BASH command complete the following:

    Sort the /etc/passwd file numerically by the GID field.
    For the 10th entry in the sorted passwd file, get an md5 hash of that entryâ€™s home directory.
    Output ONLY the MD5 hash of the directory's name to standard output.

Note: Since we are dealing with a directory, which is both a string and an absolute path, it matters how we get the md5sum of our intended output.

[chris@localhost ~]$ md5sum /home/chris
md5sum: /home/chris: Is a directory

In the above example, an error is returned because we are applying the directory /home/chris as the first argument of the above command. Since /home/chris is a directory, likely with additional files within it, we cannot assign this as an argument. However, we have the string /home/chris as STDIN for a command, as seen in the below example.

[chris@localhost ~]$ echo "/home/chris" | md5sum
fd1a05901ce7150f82abd7f7d76f2827  -


















a=$(sort -t :  -nk 4 /etc/passwd | head | tail -1 | awk -F: '{print $6}')
echo $a | md5sum | cut -d- -f1





 coding bash

Activity:

    Find all executable files under the following four directories:
        /bin
        /sbin
        /usr/bin
        /usr/sbin
    Sort the filenames with absolute path, and get the md5sum of the 10th file from the top of the list.

Tip: In the below example, you can see the different uses of md5sum. While not wrong, the first command is hashing the string output of the the find command. In the second, md5sum is hashing the file contents of the given file, which is what is intended for this activity. You can also tell the second method hashed the file as the file name is listed in the hash output; the first only lists a hyphen indicating a string was hashed. For this activity, to provide md5sum with the 10th file of the sorted output, it is recommended to use Command Subtitution.

[chris@localhost ~]$ find /etc -maxdepth 1 -name passwd | md5sum
9231fb35b4431d59eae53a8c0d673231  -
[chris@localhost ~]$ md5sum /etc/passwd
62f5fa5100adcee3305cf979b5734a3e  /etc/passwd



a=$(find  /bin /sbin /usr/bin /usr/sbin -executable -type f | sort | head | tail -1)
md5sum $a | cut -d/ -f1


 coding bash

Activity:

    Write a script which will copy the last entry/line in the passwd-like file specified by the $1 positional parameter
    Modify the copied line to change:
        User name to the value specified by $2 positional parameter
        Used id and group id to the value specified by $3 positional parameter
        Home directory to a directory matching the user name specified by $2 positional parameter under the /home directory
        The default shell to `/bin/bash'
    Append the modified line to the end of the file

Tip: awk provides the simplest method for completing this activity. Refer back to your notes on "09 - BASH Activity" if you are in need of starting point on this activity.

Note: The contents of the passwd-like file will be randomly generated on each submission. It is intended to read the last line once and store it in a variable.

To read more on Positional Parameters, go to the following resource:

    https://www.gnu.org/software/bash/manual/bash.html#Positional-Parameters

To read more on the Passwd file format, go to the following resource:




 coding bash

Activity:

    Write a script which will copy the last entry/line in the passwd-like file specified by the $1 positional parameter
    Modify the copied line to change:
        User name to the value specified by $2 positional parameter
        Used id and group id to the value specified by $3 positional parameter
        Home directory to a directory matching the user name specified by $2 positional parameter under the /home directory
        The default shell to `/bin/bash'
    Append the modified line to the end of the file

Tip: awk provides the simplest method for completing this activity. Refer back to your notes on "09 - BASH Activity" if you are in need of starting point on this activity.

Note: The contents of the passwd-like file dmesg | egrep "BIOS|CPU" | egrep -vi "usable|reserved" | cut -d] -f2-will be randomly generated on each submission. It is intended to read the last line once and store it in a variable.

To read more on Positional Parameters, go to the following resource:

    https://www.gnu.org/software/bash/manual/bash.html#Positional-Parameters

To read more on the Passwd file format, go to the following resource:

#!/bin/bash
name=$2
ugid=$3
file=$1
base=$(tail -1 $file)
echo $base | awk -F: -v "awkname=$name" -v "awkugid=$ugid" 'BEGIN {OFS=":"} {$1=awkname} {$3=awkugid} {$4=awkugid} {$6="/home/"awkname}
{$NF="/bin/bash"} {print $0}' >> $file



dmesg | egrep "BIOS|CPU" | egrep -vi "usable|reserved" | cut -d] -f2-
